- name: Backup TP-Link Jetstream Configuration
  hosts: jetstream_devices
  gather_facts: false
  connection: local

  vars:
    login_url: "http://{{ ansible_host }}/data/login.json"
    backup_url_template: "http://{{ ansible_host }}/data/sysConfigBackup.cfg?operation=write&unit_id=0&_tid_={{ tid }}&usrLvl=3"
    backup_directory: "/ansible/backup"
    timestamp: "{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"

  tasks:
    - block:

        - name: Ensure backup_changed is defined
          set_fact:
            backup_changed: false

        - name: Login to the switch and get _tid_
          uri:
            url: "{{ login_url }}"
            method: POST
            headers:
              Content-Type: "application/json"
            body_format: json
            body:
              username: admin
              password: "{{ password }}"
              operation: "write"
            return_content: true
          register: login_response

        - name: Extract _tid_ from the login response
          set_fact:
            tid: "{{ login_response.json.data._tid_ }}"

        - name: Create temp directory
          tempfile:
            state: directory
            suffix: jetstream
          register: temp_dir

        - name: Download the backup to temp file
          get_url:
            url: "{{ backup_url_template }}"
            dest: "{{ temp_dir.path }}/backup.cfg"
          delegate_to: localhost

        - name: Read contents of new backup
          slurp:
            src: "{{ temp_dir.path }}/backup.cfg"
          register: new_backup

        - name: Find all existing backups
          find:
            paths: "{{ backup_directory }}"
            patterns: "{{ ansible_host | replace('.', '_') }}_*.cfg"
            recurse: no
          register: found_backups

        - name: Sort backups by mtime (newest first)
          set_fact:
            existing_backups: "{{ found_backups.files | sort(attribute='mtime', reverse=true) }}"

        - name: Compare with latest existing backup
          set_fact:
            backup_changed: true
          when: >
            existing_backups | length == 0 or
            (lookup('file', existing_backups[0].path) | b64encode != new_backup.content)

        - name: Copy backup with timestamp if changed
          copy:
            src: "{{ temp_dir.path }}/backup.cfg"
            dest: "{{ backup_directory }}/{{ ansible_host | replace('.', '_') }}_{{ timestamp }}.cfg"
          when: backup_changed

        - name: Keep only 7 latest backups per device
          file:
            path: "{{ item.path }}"
            state: absent
          loop: "{{ existing_backups[7:] }}"
          when: backup_changed

        - name: Clean up temp directory
          file:
            path: "{{ temp_dir.path }}"
            state: absent

      rescue:
        - name: A task failed, sending notification to teams
          include_tasks: notify_teams.yml
          vars:
            failed_task: "{{ ansible_failed_task.name | default('Unknown Task') }}"
            failed_host: "{{ ansible_host }}"
